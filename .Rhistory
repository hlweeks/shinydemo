table(is.na(dat_trans))
pca_trans <- princomp(dat_trans, cor = TRUE)
#pca_trans <- pc(dat_trans, k=10)
plot(pca_trans, type = 'lines')
addscree(pca_trans)
pca_trans
pca_trans$loadings
?princomp
#Lab variables: those missing on the non-randomized plus bilirubin, albumin, and prothrombin time
lab_trans <- subset(dat_trans, select = Cs(spiders, hepatom, ascites, alk.phos, sgot, chol, trig, platelet, copper, bili, albumin, protime))
pca_lab_trans <- princomp(lab_trans, cor = TRUE)
plot(pca_lab_trans, type = 'lines')
addscree(pca_lab_trans)
optLambda <- opt.TPO(dat_trans)
#change k to be all, however many that is (16?)
s<- sPCAgrid(dat_trans, k = length(optLambda$pc$lambda), method = 'sd',
center = mean, scale = sd, scores = TRUE, maxiter = 10,
lambda = optLambda$pc$lambda)
s$loadings
pca_trans$loadings
t(pca_trans$loadings)
t(pca_trans$loadings)+1
s$loadings + 1
pca_trans$loadings + 1
s$loadings + 1
names(pca_trans$loadings)
pca_trans$loadings[1:10,]
pca_trans$loadings[1:16,]
pca_trans$loadings[1:17,]
s$loadings[1:16,]
pca_trans$loadings[1:16,]
table(pca_trans$loadings[1:16,] == 0)
table(s$loadings[1:16,] == 0)
table(all.equal(pca_trans$loadings[1:16,], 0))
tol <- .Machine$double.eps #basically 0, deals with floating point issue
table(pca_trans$loadings[1:16,] < tol)
table(s$loadings[1:16,] < tol)
tol
pca_trans$loadings[1:16,]
table(abs(pca_trans$loadings[1:16,]) < tol)
table(abs(s$loadings[1:16,]) < tol)
s$loadings[1:16,]
s$loadings
s$loadings
?sPCAgrid
plot(s)
loadings(s, cutoff = tol)
loadings(s, cutoff = .1)
loadings(s, cutoff = .4)
loadings(pca_trans, cutoff = .4)
loadings(pca_trans, digits = 1)
loadings(pca_trans$loadings, digits = 1)
pca_trans$loadings
loadings(pca_trans$loadings, cutoff=.4)
optLambda <- opt.TPO(dat_trans, n.lambda = 50)
#change k to be all, however many that is (16?)
s<- sPCAgrid(dat_trans, k = length(optLambda$pc$lambda), method = 'sd',
center = mean, scale = sd, scores = TRUE, maxiter = 10,
lambda = optLambda$pc$lambda)
plot(s, type = 'lines')
addscree(s)
#change k to be all
optLambda$pc$lambda
test <- opt.BIC(dat_trans)
test$pc
test$pc[[1]]$lambda
test$pc[[2]]$lambda
test$pc[[3]]$lambda
test$pc[[4]]$lambda
lapply(test$pc, function(x) x$lambda)
s<- sPCAgrid(dat_trans, k = length(optLambda$pc$lambda), method = 'sd',
center = mean, scale = sd, scores = TRUE, maxiter = 10,
lambda = optLambda$pc$lambda)
plot(s, type = 'lines')
addscree(s)
optLambda$pc$lambda
optLambda <- opt.TPO(dat_trans, n.lambda = 50)
optLambda$pc$lambda
#change k to be all, however many that is (16?)
s <- sPCAgrid(dat_trans, k = length(optLambda$pc$lambda), method = 'sd',
center = mean, scale = sd, scores = TRUE, maxiter = 10,
lambda = optLambda$pc$lambda)
s$loadings
plot(s, type = 'lines')
addscree(s)
sPCAgrid
s
s$loadings
table(s$loadings < tol)
table(s$loadings[1:16,] < tol)
table(pca_trans$loadings < tol)
tol
table(pca_trans$loadings > 0)
pca_trans$loadings
table(pca_trans$loadings > 0)
table(abs(pca_trans$loadings) > 0)
table(abs(s$loadings[1:16,]) < tol)
table(abs(s$loadings[1:16,]) > 0)
plot(s, type = 'lines')
addscree(s)
getHdata(pbc)
#Remove the non-randomized patients: missing spiders, hepatom, ascites, alk.phos, sgot
pbc_nonRand <- pbc[pbc$drug == "not randomized",]
pbc <- pbc[pbc$drug != "not randomized",]
#Data for Q1-6 ignoring time, status, and drug
dat <- subset(pbc, select = -c(fu.days, status, drug))
datMiss <- subset(dat, select = c("chol", "trig", "platelet", "copper"))
#% of patients with at least one variable missing
perMiss <- sum(rowSums(apply(datMiss, 2, is.na))>0)/nrow(dat)
cat("Percent Obs with Missing:", round(perMiss*100, 1),
"\nN Obs with Missing:", sum(rowSums(apply(datMiss, 2, is.na))>0))
#% missing within each variable
apply(datMiss, 2, function(x) round(table(is.na(x))[2]/nrow(dat)*100, 2))
#Need to re-factor since we removed all observations from "non-randomized" group
pbc$drug <- factor(pbc$drug)
#currently has all variables in the imputation model
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + I(sex) + age + I(spiders) + I(hepatom) + I(ascites) + alk.phos + sgot + I(edema) + I(drug), data = pbc, n.impute = 10, x = TRUE)
pbc_trans <- transcan(~ chol + trig + platelet + copper + bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + edema, data = dat, transformed = TRUE, trantab = TRUE, pr = FALSE, pl = FALSE, xtrans = datImp,
categorical = c("sex", "spiders", "hepatom", "ascites", "edema"))
#Show complete
table(is.na(pbc_trans$transformed))
dim(pbc_trans$transformed)
#ggplot(pbc_trans, scale = T)
#summary(pbc_trans)
dat_trans <- pbc_trans$transformed
pca_trans <- princomp(dat_trans, cor = TRUE)
#pca_trans <- pc(dat_trans, k=10)
plot(pca_trans, type = 'lines')
addscree(pca_trans)
#Lab variables: those missing on the non-randomized plus bilirubin, albumin, and prothrombin time
lab_trans <- subset(dat_trans, select = Cs(spiders, hepatom, ascites, alk.phos, sgot, chol, trig, platelet, copper, bili, albumin, protime))
pca_lab_trans <- princomp(lab_trans, cor = TRUE)
plot(pca_lab_trans, type = 'lines')
addscree(pca_lab_trans)
optLambda <- opt.TPO(dat_trans, n.lambda = 50)
optLambda$pc$lambda
#change k to be all, however many that is (16?)
s <- sPCAgrid(dat_trans, k = length(optLambda$pc$lambda), method = 'sd',
center = mean, scale = sd, scores = TRUE, maxiter = 10,
lambda = optLambda$pc$lambda)
plot(s, type = 'lines')
addscree(s)
names(dat)
?aregImpute
nrow(dat)
nrow(dat)/15
hist(pbc$chol)
cmiss <- pbc$chol[is.na(pbc$chol)]
cnomiss <- pbc$chol[!is.na(pbc$chol)]
hist(pbc$chol[is.na(pbc$chol)], col=red)
hist(cmiss)
hist(cmiss, breaks = 10)
cmiss
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(drug), data = pbc, n.impute = 10, x = TRUE)
obc$chol
pbc$chol
cmiss <- pbc$chol[which(is.na(pbc$chol))]
cnomiss <- pbc$chol[which(!is.na(pbc$chol))]
hist(cmiss, col="red")
cmiss
which(is.na(pbc$chol))
cmiss <- which(is.na(pbc$chol))
cnomiss <- which(!is.na(pbc$chol))
table(pbc$drug[cmiss])
table(pbc$drug[cnomiss])
table(pbc$drug[cmiss])/nrow(dat)
table(pbc$drug[cnomiss])/nrow(dat)
table(pbc$drug[cmiss])/length(cmiss)
table(pbc$drug[cnomiss])/length(cnomiss)
nameS(dat)
names(dat)
table(pbc$sex[cnomiss])/length(cnomiss)
table(pbc$sex[cmiss])/length(cmiss)
table(pbc$spiders[cnomiss])/length(cnomiss)
table(pbc$spiders[cmiss])/length(cmiss)
table(pbc$hepatom[cnomiss])/length(cnomiss)
table(pbc$hepatom[cmiss])/length(cmiss)
names(dat)
table(pbc$ascites[cnomiss])/length(cnomiss)
table(pbc$ascites[cmiss])/length(cmiss)
table(pbc$edema[cnomiss])/length(cnomiss)
table(pbc$edema[cmiss])/length(cmiss)
with(pbc, lrm(chol~edema))
with(pbc, lm(chol~edema))
with(pbc, Summary(lm(chol~edema)))
with(pbc, summary(lm(chol~edema)))
with(pbc, summary(lm(ctrighol~edema)))
with(pbc, summary(lm(trig~edema)))
312/10
head(pbc$alk.phos)
cmiss <- which(is.na(pbc$chol))
cnomiss <- which(!is.na(pbc$chol))
table(pbc$sex[cmiss])/length(cmiss)
table(pbc$sex[cnomiss])/length(cnomiss)
tmiss <- which(is.na(pbc$trig))
tnomiss <- which(!is.na(pbc$trig))
table(pbc$sex[tmiss])/length(tmiss)
table(pbc$sex[tnomiss])/length(tnomiss)
cat("Cholesterol Missing:\n", table(pbc$sex[cmiss])/length(cmiss),
"\nCholesterol Not Missing:", table(pbc$sex[cnomiss])/length(cnomiss))
cat("\nTriglycerides Missing:", table(pbc$sex[tmiss])/length(tmiss),
"\nTriglycerides Not Missing:", table(pbc$sex[tnomiss])/length(tnomiss))
cat("Cholesterol Missing:\n", table(pbc$sex[cmiss])/length(cmiss),
"\nCholesterol Not Missing:\n", table(pbc$sex[cnomiss])/length(cnomiss))
cat("Cholesterol Missing:\n Male:", table(pbc$sex[cmiss])/length(cmiss)[1],
"Female:", table(pbc$sex[cmiss])/length(cmiss)[2],
"\nCholesterol Not Missing:\n", table(pbc$sex[cnomiss])/length(cnomiss))
cat("Cholesterol Missing:\n Male:", table(pbc$sex[cmiss])[1]/length(cmiss),
"Female:", table(pbc$sex[cmiss])[2]/length(cmiss),
"\nCholesterol Not Missing:\n", table(pbc$sex[cnomiss])/length(cnomiss))
cat("Cholesterol Missing:\nMale:", table(pbc$sex[cmiss])[1]/length(cmiss),
"Female:", table(pbc$sex[cmiss])[2]/length(cmiss),
"\nCholesterol Not Missing:\nMale:", table(pbc$sex[cnomiss])[1]/length(cnomiss),
"Female:", table(pbc$sex[cnomiss])[2]/length(cnomiss))
cat("Triglycerides Missing:\nMale:", table(pbc$sex[tmiss])[1]/length(tmiss),
"Female:", table(pbc$sex[tmiss])[2]/length(tmiss),
"\Triglycerides Not Missing:\nMale:", table(pbc$sex[tnomiss])[1]/length(tnomiss),
cat("Cholesterol Missing:\nMale:", table(pbc$sex[cmiss])[1]/length(cmiss),
"Female:", table(pbc$sex[cmiss])[2]/length(cmiss),
"\nCholesterol Not Missing:\nMale:", table(pbc$sex[cnomiss])[1]/length(cnomiss),
"Female:", table(pbc$sex[cnomiss])[2]/length(cnomiss))
cat("Triglycerides Missing:\nMale:", table(pbc$sex[tmiss])[1]/length(tmiss),
"Female:", table(pbc$sex[tmiss])[2]/length(tmiss),
"\nTriglycerides Not Missing:\nMale:", table(pbc$sex[tnomiss])[1]/length(tnomiss),
"Female:", table(pbc$sex[tnomiss])[2]/length(tnomiss))
#Need to re-factor since we removed all observations from "non-randomized" group
pbc$drug <- factor(pbc$drug)
#currently has all variables in the imputation model
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex), data = pbc, n.impute = 10, x = TRUE)
datImp$rsq
datImp$rsq
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex) + I(drug), data = pbc, n.impute = 10, x = TRUE)
datImp$rsq
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex) + I(edema), data = pbc, n.impute = 10, x = TRUE)
datImp$rsq
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex) + I(spiders), data = pbc, n.impute = 10, x = TRUE)
datImp$rsq
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex), data = pbc, n.impute = 10, x = TRUE)
datImp$rsq
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot, data = pbc, n.impute = 10, x = TRUE)
datImp$rsq
+ I(sex)
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex), data = pbc, n.impute = 10, x = TRUE)
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex) + I(drug) + I(spiders) + I(hepatom) + I(ascites), data = pbc, n.impute = 10, x = TRUE)
datImp$rsq
dat <- cbind(dat, pbc$fu.days, pbc$status) #Need the outcomes back for imputation
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex), data = pbc, n.impute = 10, x = TRUE)
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex), data = dat, n.impute = 10, x = TRUE)
getHdata(pbc)
#Remove the non-randomized patients: missing spiders, hepatom, ascites, alk.phos, sgot
pbc_nonRand <- pbc[pbc$drug == "not randomized",]
pbc <- pbc[pbc$drug != "not randomized",]
#Data for Q1-6 ignoring time, status, and drug
dat <- subset(pbc, select = -c(fu.days, status, drug))
dat2 <- as.data.frame(cbind(dat, pbc$fu.days, pbc$status))#Need the outcomes back for imputation
names(dat2)
dat2 <- as.data.frame(cbind(dat, fu.days = pbc$fu.days, status = pbc$status))#Need the outcomes back for imputation
names(dat2)
dat <- as.data.frame(cbind(dat, fu.days = pbc$fu.days, status = pbc$status))#Need the outcomes back for imputation
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex), data = dat, n.impute = 10, x = TRUE)
datImp$rsq
datImp$rsq["copper"]*100
round(datImp$rsq["copper"]*100, 0)
??opts
getHdata(pbc)
#Remove the non-randomized patients: missing spiders, hepatom, ascites, alk.phos, sgot
pbc_nonRand <- pbc[pbc$drug == "not randomized",]
pbc <- pbc[pbc$drug != "not randomized",]
#Data for Q1-6 ignoring time, status, and drug
dat <- subset(pbc, select = -c(fu.days, status, drug))
datMiss <- subset(dat, select = c("chol", "trig", "platelet", "copper"))
#% of patients with at least one variable missing
perMiss <- sum(rowSums(apply(datMiss, 2, is.na))>0)/nrow(dat)
cat("Percent Obs with Missing:", round(perMiss*100, 1),
"\nN Obs with Missing:", sum(rowSums(apply(datMiss, 2, is.na))>0))
#% missing within each variable
apply(datMiss, 2, function(x) round(table(is.na(x))[2]/nrow(dat)*100, 2))
#Need to re-factor since we removed all observations from "non-randomized" group
pbc$drug <- factor(pbc$drug)
#Imputation model
#Need the outcomes back for imputation
dat <- as.data.frame(cbind(dat, fu.days = pbc$fu.days, status = pbc$status))
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex), data = dat, n.impute = 10, x = TRUE)
datImp$rsq
getHdata(pbc)
#Remove the non-randomized patients: missing spiders, hepatom, ascites, alk.phos, sgot
pbc_nonRand <- pbc[pbc$drug == "not randomized",]
pbc <- pbc[pbc$drug != "not randomized",]
#Data for Q1-6 ignoring time, status, and drug
dat <- subset(pbc, select = -c(fu.days, status, drug))
datMiss <- subset(dat, select = c("chol", "trig", "platelet", "copper"))
#% of patients with at least one variable missing
perMiss <- sum(rowSums(apply(datMiss, 2, is.na))>0)/nrow(dat)
cat("Percent Obs with Missing:", round(perMiss*100, 1),
"\nN Obs with Missing:", sum(rowSums(apply(datMiss, 2, is.na))>0))
plot(varclus(~., data = dat, similarity = 'spearman'))
#% missing within each variable
apply(datMiss, 2, function(x) round(table(is.na(x))[2]/nrow(dat)*100, 2))
plot(naclus(dat))
mice::md.pattern(datMiss)
#Missing/not missing indices
cmiss <- which(is.na(pbc$chol)); cnomiss <- which(!is.na(pbc$chol))
tmiss <- which(is.na(pbc$trig)); tnomiss <- which(!is.na(pbc$trig))
cat("Cholesterol Missing:\nMale:", table(pbc$sex[cmiss])[1]/length(cmiss),
"Female:", table(pbc$sex[cmiss])[2]/length(cmiss),
"\nCholesterol Not Missing:\nMale:", table(pbc$sex[cnomiss])[1]/length(cnomiss),
"Female:", table(pbc$sex[cnomiss])[2]/length(cnomiss))
cat("Triglycerides Missing:\nMale:", table(pbc$sex[tmiss])[1]/length(tmiss),
"Female:", table(pbc$sex[tmiss])[2]/length(tmiss),
"\nTriglycerides Not Missing:\nMale:", table(pbc$sex[tnomiss])[1]/length(tnomiss),
"Female:", table(pbc$sex[tnomiss])[2]/length(tnomiss))
#Missing/not missing indices
cmiss <- which(is.na(dat$chol)); cnomiss <- which(!is.na(dat$chol))
tmiss <- which(is.na(dat$trig)); tnomiss <- which(!is.na(dat$trig))
cat("Cholesterol Missing:\nMale:", table(dat$sex[cmiss])[1]/length(cmiss),
"Female:", table(dat$sex[cmiss])[2]/length(cmiss),
"\nCholesterol Not Missing:\nMale:", table(dat$sex[cnomiss])[1]/length(cnomiss),
"Female:", table(dat$sex[cnomiss])[2]/length(cnomiss))
cat("Triglycerides Missing:\nMale:", table(dat$sex[tmiss])[1]/length(tmiss),
"Female:", table(dat$sex[tmiss])[2]/length(tmiss),
"\nTriglycerides Not Missing:\nMale:", table(dat$sex[tnomiss])[1]/length(tnomiss),
"Female:", table(dat$sex[tnomiss])[2]/length(tnomiss))
library(Hmisc)
library(rms)
library(pcaPP)
library(knitr)
opts_chunk$set(tidy = TRUE)
getHdata(pbc)
#Remove the non-randomized patients: missing spiders, hepatom, ascites, alk.phos, sgot
pbc_nonRand <- pbc[pbc$drug == "not randomized",]
pbc <- pbc[pbc$drug != "not randomized",]
#Data for Q1-6 ignoring time, status, and drug
dat <- subset(pbc, select = -c(fu.days, status, drug))
#Need to re-factor since we removed all observations from "non-randomized" group
dat$drug <- factor(dat$drug)
dat <- as.data.frame(cbind(dat, fu.days = pbc$fu.days, status = pbc$status))
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex), data = dat, n.impute = 10, x = TRUE)
datImp$rsq
library(Hmisc)
library(rms)
library(pcaPP)
library(knitr)
opts_chunk$set(tidy = TRUE)
getHdata(pbc)
#Remove the non-randomized patients: missing spiders, hepatom, ascites, alk.phos, sgot
pbc_nonRand <- pbc[pbc$drug == "not randomized",]
pbc <- pbc[pbc$drug != "not randomized",]
#Data for Q1-6 ignoring time, status, and drug
dat <- subset(pbc, select = -c(fu.days, status, drug))
r2 <- partial(round(digits = 2))
library(purrr)
r2 <- partial(round(digits = 2))
?partial
r2 <- partial(round, digits = 2)
data.frame(Mean = r2(rowMeans(datImp$imputed$chol)),
Median = apply(datImp$imputed$chol, 1, functino(x) quantile(x, probs = 0.5)))
data.frame(Mean = r2(rowMeans(datImp$imputed$chol)),
Median = apply(datImp$imputed$chol, 1, function(x) quantile(x, probs = 0.5)))
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex), data = dat, n.impute = 10, x = TRUE)
getHdata(pbc)
#Remove the non-randomized patients: missing spiders, hepatom, ascites, alk.phos, sgot
pbc_nonRand <- pbc[pbc$drug == "not randomized",]
pbc <- pbc[pbc$drug != "not randomized",]
#Data for Q1-6 ignoring time, status, and drug
dat <- subset(pbc, select = -c(fu.days, status, drug))
#Imputation model
#Need the outcomes back for imputation
dat <- as.data.frame(cbind(dat, fu.days = pbc$fu.days, status = pbc$status))
datImp <- aregImpute( ~ chol + trig + platelet + copper + fu.days + I(status) + bili + albumin + I(stage) + protime + age + alk.phos + sgot + I(sex), data = dat, n.impute = 10, x = TRUE)
#Correlation coefficients
datImp$rsq
r2 <- partial(round, digits = 2)
cat("Cholesterol: Imputed Summary\n")
data.frame(Mean = r2(rowMeans(datImp$imputed$chol)),
Median = apply(datImp$imputed$chol, 1, function(x) quantile(x, probs = 0.5)))
pbc_trans <- transcan(~ chol + trig + platelet + copper + bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + edema, data = dat, transformed = TRUE, trantab = TRUE, pr = FALSE, pl = FALSE, xtrans = datImp,
categorical = c("sex", "spiders", "hepatom", "ascites", "edema"))
plot(pbc_trans)
ggplot(pbc_trans, scale = T)
ggplot(pbc_trans, scale = T)
pbc_trans <- transcan(~ chol + trig + platelet + copper + bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + edema, data = dat, transformed = TRUE, trantab = TRUE, pr = FALSE, pl = FALSE, xtrans = datImp,
categorical = c("sex", "spiders", "hepatom", "ascites", "edema"))
ggplot(pbc_trans, scale = T)
pbc_trans <- transcan(~ chol + trig + platelet + copper + bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + edema, data = dat, transformed = TRUE, trantab = TRUE, pr = FALSE, pl = FALSE, xtrans = datImp,
categorical = c("sex", "spiders", "hepatom", "ascites", "edema"))
pbc_trans <- transcan(~ chol + trig + platelet + copper + bili + albumin + I(stage) + protime + sex + age + spiders + hepatom + ascites + alk.phos + sgot + edema, data = dat, transformed = TRUE, trantab = TRUE, pr = FALSE, pl = FALSE, xtrans = datImp,
setwd("~/Documents/RLadies/shinydemo")
library(shiny)
library(shinydashboard)
library(rhandsontable)
?sliderInput
ggplot(aes(x = 1:10, y = 1:10)) + emoGG::geom_emoji(emoji="1f37a")
library(ggplot2)
ggplot(aes(x = 1:10, y = 1:10)) + emoGG::geom_emoji(emoji="1f37a")
ggplot(aes(x = 1:10, y = 1:10)) + geom_point()
?ggplot
df <- data.frame(x=1:10, y=1:10)
ggplot(df, aes(x, y)) + geom_point()
ggplot(df, aes(x, y)) + emoGG::geom_emoji(emoji="1f37a")
devtools::install_github(dill/emoGG)
devtools::install_github("dill/emoGG")
ggplot(df, aes(x, y)) + emoGG::geom_emoji(emoji="1f37a")
animal.df <- data.frame(n  = c(1,0),
emoji = c("1f436", "1f431"),
row.names = c("Dogs", "Cats"))
apply(animal.df, MARGIN = 1, function(x) x$n > 0)
apply(animal.df, MARGIN = 1, function(x) x['n'] > 0)
animal.df[apply(animal.df, MARGIN = 1, function(x) x['n'] > 0),]
animal.df <- data.frame(n  = c(1,0, 2),
emoji = c("1f436", "1f431", "1f414"),
row.names = c("Dogs", "Cats", "Chickens"))
animal.df <- animal.df[apply(animal.df, MARGIN = 1, function(x) x['n'] > 0),]
animal.df <- data.frame(animal = c("Dogs", "Cats", "Chickens"),
n  = c(1, 0, 2),
emoji = c("1f436", "1f431", "1f414"))
animal.df <- animal.df[apply(animal.df, MARGIN = 1, function(x) x['n'] > 0),]
ggplot(animal.df, aes(animal, n)) + geom_point()
ggplot(animal.df, aes(animal, n)) + geom_emoji(emoji)
devtools::install_github("dill/emoGG")
ggplot(animal.df, aes(animal, n)) + geom_emoji(emoji)
ggplot(animal.df, aes(animal, n)) + emoGG::geom_emoji(emoji)
ggplot(animal.df, aes(animal, n)) + emoGG::geom_emoji("1f436")
ggplot(animal.df, aes(animal, n)) + emoGG::geom_emoji(emoji="1f37a")
ggplot(animal.df, aes(animal, n)) + emoGG::geom_emoji(emoji=emoji)
animal.df
names(animal.df)[3] <- "sym"
ggplot(animal.df, aes(animal, n)) + emoGG::geom_emoji(emoji=sym)
ggplot(animal.df, aes(animal, n)) + emoGG::geom_emoji(emoji=as.character(sym))
ggplot(animal.df, aes(animal, n)) + geom_point()
?grom_point
?geom_point
ggplot(animal.df, aes(animal, n)) + geom_point(shape = c(23, 24))
library(emoGG)
ggplot(animal.df, aes(animal, n)) + add_emoji("1f436")
ggplot(animal.df, aes(animal, n)) + emojisGrob("1f436")
ggplot(animal.df, aes(animal, n)) + emojisGrob("1f436", img = emoji_search("dog"))
emoji_search("sog")
emoji_search("dog")
ggplot(animal.df, aes(animal, n)) + emojisGrob("1f436", img = "1f436")
ggplot(animal.df, aes(animal, n)) + emojisGrob(img = "1f436")
ggplot(animal.df, aes(animal, n)) + emojisGrob(animal, n, img = "1f436")
ggplot(animal.df, aes(animal, n)) + emojisGrob(animal.df$animal, animal.df$n, img = "1f436")
ggplot(animal.df, aes(animal, n)) + emojisGrob(animal.df$animal, animal.df$n, size = "100%", img = "1f436")
ggplot(animal.df, aes(animal, n)) + emojisGrob(animal.df$animal, animal.df$n, size = 1, img = "1f436")
ggplot(animal.df, aes(animal, n)) + geom_point() + emojisGrob(animal.df$animal, animal.df$n, size = 1, img = "1f436")
ggplot(animal.df, aes(animal, n)) + geom_emoji(emoji = "1f436")
ggplot(animal.df, aes(animal, n)) + geom_emoji(emoji = "1f414")
?remove.packages
remove.packages("emoGG")
library(emojifont)
install.packages(emojifont)
install.packages("emojifont")
library(emojifont)
ggplot(animal.df, aes(animal, n, color = animal)) + geom_text(family = "EmojiOne", size = 6)
animal.df <- data.frame(animal = c("Dogs", "Cats", "Chickens"),
n  = c(1,0,2),
sym = c(emoji('dog'), emoji('cat'), emoji("chicken")))
ggplot(animal.df, aes(animal, n, label = sym)) + geom_text(family = "EmojiOne", size = 6)
ggplot(animal.df, aes(animal, n, color = animal, label = sym)) + geom_text(family = "EmojiOne", size = 6)
warnings()
ggplot(animal.df, aes(animal, n, label = sym)) + geom_text(family = "EmojiOne", size = 6)
d <- data.frame(x=x, y=y,
label = sample(c(emoji('cow'), emoji('camel')), 10, replace=TRUE),
type = sample(LETTERS[1:3], 10, replace=TRUE))
library("ggplot2")
ggplot(d, aes(x, y, color=type, label=label)) +
geom_text(family="EmojiOne", size=6)
x=1:10
y=1:10
d <- data.frame(x=x, y=y,
label = sample(c(emoji('cow'), emoji('camel')), 10, replace=TRUE),
type = sample(LETTERS[1:3], 10, replace=TRUE))
library("ggplot2")
ggplot(d, aes(x, y, color=type, label=label)) +
geom_text(family="EmojiOne", size=6)
d <- data.frame(x=x, y=y,
label = sample(c(emoji('cow'), emoji('camel')), 10, replace=TRUE),
type = sample(LETTERS[1:3], 10, replace=TRUE))
warnings()
d <- data.frame(x=x, y=y,
label = sample(c(emoji('cow'), emoji('camel')), 10, replace=TRUE),
type = sample(LETTERS[1:3], 10, replace=TRUE))
ggplot(d, aes(x, y, color=type, label=label)) +
geom_text(family="EmojiOne", size=6)
ggplot(d, aes(x, y)) + geom_emoji('dog')
warnings()
ggplot(d, aes(x, y)) + geom_emoji('dog')
ggplot(d, aes(x, y)) + geom_emoji('dog')
x = seq(0, 2*pi, length=30)
y = sin(x)
ggplot() + geom_emoji('heartbeat', x=x, y=y, size=10)
x = seq(0, 2*pi, length=30)
y = sin(x)
ggplot() + geom_emoji('heartbeat', x=x, y=y, size=10)
warnings()
quartz()
x = seq(0, 2*pi, length=30)
y = sin(x)
ggplot() + geom_emoji('heartbeat', x=x, y=y, size=10)
runApp('R-Ladies_ShinyDemo')
runApp('R-Ladies_ShinyDemo')
?sliderInput
?sliderInput
?sliderInput
test
?help
runApp('R-Ladies_ShinyDemo')
runApp('R-Ladies_ShinyDemo')
emoji('dog')
runApp('R-Ladies_ShinyDemo')
library(xtable)
?latex
